// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name D1Core
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CommonCrypto
import CryptoKit
@_exported import D1Core
import Foundation
import LocalAuthentication
import Network
import OSLog
import SQLite3
import SecureLogAPI
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class SecureTextField : UIKit.UITextField, UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency @objc convenience dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func insertText(_ text: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isSecureTextEntry: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func becomeFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var autocorrectionType: UIKit.UITextAutocorrectionType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var keyboardType: UIKit.UIKeyboardType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var delegate: (any UIKit.UITextFieldDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var inputView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var inputAccessoryView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc deinit
}
public enum WalletType : Swift.Int, Swift.Decodable {
  case applePay
  case scheme
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AssetContentType : Swift.Int, Swift.Decodable {
  case icon
  case background
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CardScheme : Swift.Int, Swift.Decodable {
  case visa
  case mastercard
  case pagobancomat
  case amex
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CardState : Swift.Int, Swift.Decodable {
  case active
  case inactive
  case expired
  case deleted
  case replaced
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CardMimeType : Swift.Int, Swift.Decodable {
  case pdf
  case png
  case svg
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CardAction : Swift.Int, Swift.Decodable {
  case resume
  case suspend
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ActivateDigitalCardStatus : Swift.Int, Swift.Decodable {
  case pending
  case successful
  case failed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum PINEvent : Swift.Int, Swift.Decodable {
  case firstEntryFinish
  case pinMismatch
  case pinMatch
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
open class ChangePINOptions {
  public init(pinLength: Swift.Int) throws
  public var pinLength: Swift.Int {
    get
  }
  @objc deinit
}
public class CardDetailsUI {
  public var panTextField: D1Core.DisplayTextField?
  public var cvvTextField: D1Core.DisplayTextField?
  public var expiryDateTextField: D1Core.DisplayTextField?
  public var cardHolderNameTextField: D1Core.DisplayTextField?
  public var panSeparatorCharacter: Swift.String
  public var panMaskCharacter: Swift.String
  public var expiryDateFormat: Swift.String
  public init(panTextField: D1Core.DisplayTextField?, expiryDateTextField: D1Core.DisplayTextField?, cvvTextField: D1Core.DisplayTextField?, cardHolderNameTextField: D1Core.DisplayTextField?)
  public func showCardDetails(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func maskCardDetails()
  public func wipe()
  @objc deinit
}
extension D1Core.PINEntryUI {
  public func wipe()
  public func submit(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
}
extension D1Core.SecureTextField {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldDidChangeSelection(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @available(iOS 16.0, *)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textField(_ textField: UIKit.UITextField, editMenuForCharactersIn range: Foundation.NSRange, suggestedActions: [UIKit.UIMenuElement]) -> UIKit.UIMenu?
  @available(iOS 16.0, *)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textField(_ textField: UIKit.UITextField, willPresentEditMenuWith animator: any UIKit.UIEditMenuInteractionAnimating)
  @available(iOS 16.0, *)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textField(_ textField: UIKit.UITextField, willDismissEditMenuWith animator: any UIKit.UIEditMenuInteractionAnimating)
}
public enum CardPushDetailsContext : Swift.Int {
  case digitize
  case getState
  case listDigitalCard
  case listTokenRequestor
  case activate
  case c2p
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public func d1LogInfo(_ message: @autoclosure () -> Any?, sensitive: (prefix: Swift.String?, string: Swift.String?) = (nil, nil), file: Swift.StaticString = #file, function: Swift.StaticString = #function, subsystem: D1Core.LogSubsystem = .unidentify, ff: Swift.StaticString = #file)
public func d1LogError(_ message: @autoclosure () -> Any?, sensitive: (prefix: Swift.String?, string: Swift.String?) = (nil, nil), file: Swift.StaticString = #file, function: Swift.StaticString = #function, subsystem: D1Core.LogSubsystem = .unidentify)
@_hasMissingDesignatedInitializers public class CardPushDetails {
  public var encryptedCardDetails: Foundation.Data
  public var publicKeyIdentifier: Swift.String
  public var scheme: D1Core.CardScheme
  public var fpanId: Foundation.NSData?
  public var last4: Swift.String
  public var cardHolderName: Swift.String?
  public var auxiliaryScheme: Swift.String?
  public func wipe()
  @objc deinit
}
extension D1Core.MessagingClient {
  public func registerNotification(type: D1Core.NotificationType, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func unregisterNotification(type: D1Core.NotificationType, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func messageWithId(_ messageId: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func messageList(completion: @escaping ([D1Core.Message]?, (any Swift.Error)?) -> Swift.Void)
  public func markMessageListAsRead(messageIdList: [Swift.String], completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public class func reset()
}
open class Authn {
  public var msUrlInMemory: Swift.String?
  public var tenantIdInMemory: Swift.String?
  public init(baseUrl: Swift.String, issuerId: Swift.String, a2Client: D1Core.A2Client, consumerId: Swift.String) throws
  public static func msUrl() -> Swift.String?
  public static func tenantId() -> Swift.String?
  public static func reset()
  open func enrollAuthnCredentials(completion: @escaping (D1Core.AuthnEnrollInitResponse?, (any Swift.Error)?) -> Swift.Void)
  open func notifyEnrollment(clientID: Swift.String, authnType: Swift.String, localNSError: (any Swift.Error)?, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func unenrollAuthnCredentials(completion: @escaping (((any Swift.Error)?) -> Swift.Void))
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MessagingClient {
  public var consumerId: Swift.String? {
    get
    set
  }
  weak public var a2Client: D1Core.A2Client?
  public var pushToken: Swift.String? {
    get
  }
  convenience public init(baseUrl: Swift.String, issuerId: Swift.String, appProfileId: Swift.String) throws
  public func updatePushToken(_ pushToken: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func tryUpdatePushTokenAfterLogin(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
public class A2Client {
  public static func appInstanceIdWithError(_ error: Foundation.NSErrorPointer) -> Swift.String?
  public static func appInstanceId() throws -> Swift.String
  public static func reset()
  public init(baseUrl: Swift.String, issuerId: Swift.String, appGroupId: Swift.String?) throws
  public func login(_ issuerToken: Foundation.Data, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  public func authorize(_ authorizeRequest: D1Core.A2AuthorizeRequest, completion: @escaping (Foundation.NSMutableData?, Foundation.NSError?) -> Swift.Void)
  public func logout(_ completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc deinit
}
public class A2AuthorizeRequest {
  public init(scope: Swift.String, audience: Swift.String?)
  @objc deinit
}
public class A2AuthorizeRequestBuilder {
  public var audience: Swift.String?
  public init(scope: Swift.String)
  public func build() -> D1Core.A2AuthorizeRequest
  @objc deinit
}
public class TransactionRecord : Swift.Decodable {
  final public let transactionId: Swift.String
  final public let type: D1Core.TransactionType
  final public let transactionDate: Swift.String
  final public let status: D1Core.TransactionStatus
  final public let declinedReason: Swift.String?
  final public let declinedDetails: Swift.String?
  final public let amount: Swift.Int
  final public let currencyCode: Swift.String
  final public let billingAmount: Swift.Int?
  final public let billingCurrencyCode: Swift.String?
  final public let conversionRate: Swift.Double?
  final public let replacementAmount: Swift.Int?
  final public let replacementCurrencyCode: Swift.String?
  final public let merchant: D1Core.Merchant
  final public let accountNumber: Swift.String?
  final public let digitalCard: D1Core.TransactionDigitalCard?
  final public let isOnlinePayment: Swift.Bool?
  final public let isContactless: Swift.Bool?
  final public let isMagstripe: Swift.Bool?
  final public let isAbroadPayment: Swift.Bool?
  final public let initiatingParty: D1Core.InitiatingParty?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class Merchant : Swift.Decodable {
  final public let merchantId: Swift.String
  final public let name: Swift.String?
  final public let city: Swift.String?
  final public let countryCode: Swift.String?
  final public let merchantType: Swift.String?
  final public let merchantNameAndAddress: Swift.String?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public enum TransactionType : Swift.String, Swift.Decodable {
  case refund
  case purchase
  case withdrawal
  case payment
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class TransactionDigitalCard : Swift.Decodable {
  final public let digitalCardId: Swift.String?
  final public let walletId: Swift.String?
  final public let walletName: Swift.String?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public enum TransactionStatus : Swift.String, Swift.Decodable {
  case approved
  case partiallyApproved
  case declined
  case reversed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum InitiatingParty : Swift.String, Swift.Decodable {
  case merchant
  case cardholder
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class CardMetadata {
  public var cardLast4: Swift.String
  public var cardExpiry: Swift.String
  public var cardScheme: D1Core.CardScheme
  public var cardState: D1Core.CardState
  public var ongoingOperation: D1Core.OngoingOperation
  public var stateReason: D1Core.StateReason
  public var cardId: Swift.String
  public func cardAssetArray(completion: @escaping ([D1Core.CardAsset]?, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Message : Swift.Decodable {
  public var messageId: Swift.String?
  public var format: D1Core.MessageFormat?
  public var title: Swift.String?
  public var message: Swift.String?
  public var type: D1Core.MessageType?
  public var metadata: Swift.String?
  public var action: Swift.String?
  public var isRead: Swift.Bool?
  public var timestamp: Swift.String?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
extension D1Core.Message {
  public static func retrieve(messageId: Swift.String) -> D1Core.Message?
}
public enum CardSettingsGeographyRegion : Swift.Int {
  case schengenArea
  case easternEurope
  case westernEurope
  case northernEurope
  case southernEurope
  case middleEast
  case northAfrica
  case eastAfrica
  case centralAfrica
  case southernAfrica
  case westAfrica
  case centralAsia
  case eastAsia
  case westAsia
  case southAsia
  case southeastAsia
  case oceania
  case caribbean
  case centralAmerica
  case northAmerica
  case southAmerica
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CardSettingsPeriodType : Swift.Int {
  case fixed
  case rolling
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum D1CError : Swift.Int, Swift.Error {
  case unknownError
  case storage
  case network
  case notLoggedIn
  case notAuthorized
  case deviceEnvironmentUnsafe
  case noCardActivationMethod
  case uiComponentNotFound
  case pinMismatch
  case cardNotFound
  case notActive
  case cardNotManagedByD1
  case passcodeNotSet
  case cardOperationNotAllowed
  case pushTokenNotFound
  case notificationNotSupported
  case cardOperationInvalidReason
  case cardSettingsInvalidFormat
  case cardSettingsInvalidValue
  case cardSettingsOperationNotAllowed
  case invalidAppGroupId
  case pinInvalid
  case pinChangeForbidden
  case invalidArgument
  case security
  case runtime
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol PINEntryUIDelegate : AnyObject {
  func pinEntryUI(_ pinEntryUI: D1Core.PINEntryUI, pinEvent: D1Core.PINEvent, additionalInfo: Swift.String?)
}
@_hasMissingDesignatedInitializers open class PINEntryUI {
  @objc deinit
}
public enum LogSubsystem : Swift.Int {
  case d1core
  case d1sdk
  case d1walletExt
  case unidentify
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension os.OSLogType {
  public var prefix: Swift.String {
    get
  }
  public var suffix: Swift.String {
    get
  }
}
public class CardPinUI {
  public init(pinTextField: D1Core.PinDisplayTextField?)
  @objc deinit
}
public class AuthnEnrollInitResponse {
  public var enrollmentToken: Swift.String
  public var tenantId: Swift.String
  public var msUrl: Swift.String
  public init(enrollmentToken: Swift.String, tenantId: Swift.String, msUrl: Swift.String)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class D1SecureLog : ObjectiveC.NSObject, SecureLogAPI.SecureLog {
  convenience public init(config: SecureLogAPI.SecureLogConfig)
  public class func resetSharedInstance()
  public class func configureSharedInstance()
  public class func sharedInstance() -> D1Core.D1SecureLog?
  public class func hashForLog(_ string: Swift.String?) -> Swift.String
  public class func writeMessages(_ messages: [Swift.String], level: SecureLogAPI.SecureLogLevel, tag: D1Core.SecureLogTag, sensitiveString string: Swift.String?, file: Swift.StaticString = #file, function: Swift.StaticString = #function)
  public func writeMessage(_ message: Swift.String, moduleID: Swift.String, level: SecureLogAPI.SecureLogLevel, tag: D1Core.SecureLogTag)
  public func getConfiguration() -> SecureLogAPI.SecureLogConfig
  public func addSecureLogModule(_ secureLog: any SecureLogAPI.SecureLog, moduleID: Swift.String)
  @objc public func setLevel(_ level: SecureLogAPI.SecureLogLevel)
  @objc public func files() -> [Foundation.URL]
  @objc public func deleteFiles()
  @objc deinit
}
public class TransactionQuery {
  public init()
  @objc deinit
}
public enum SecureLogTag : Swift.Int {
  case d1Error
  case rasp
  case d1Task
  case d1TPC
  case d1IDC
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class CardClient {
  public var consumerId: Swift.String
  public var rsaExponent: Foundation.Data?
  public var rsaModulus: Foundation.Data?
  public static func reset()
  public init(consumerId: Swift.String, baseUrl: Swift.String, issuerId: Swift.String, a2Client: D1Core.A2Client) throws
  public func displayCard(withCardId cardId: Swift.String, completion: @escaping (D1Core.VirtualCard?, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
extension D1Core.CardClient {
  public func activateDigitalCard(_ digitalCardId: Swift.String, completion: @escaping (Swift.String?, (any Swift.Error)?) -> Swift.Void)
  public func virtualCard(_ cardId: Swift.String, completion: @escaping (D1Core.VirtualCard?, (any Swift.Error)?) -> Swift.Void)
  public func virtualCardJWE(_ cardId: Swift.String, completion: @escaping (D1Core.VirtualCard?, (any Swift.Error)?) -> Swift.Void)
  public func displayCardDetails(_ cardId: Swift.String, cardDetailsUi: D1Core.CardDetailsUI, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func metadata(_ cardId: Swift.String, completion: @escaping (D1Core.CardMetadata?, (any Swift.Error)?) -> Swift.Void)
  public func cardPushDetails(_ cardId: Swift.String, walletType: D1Core.WalletType, context: D1Core.CardPushDetailsContext, completion: @escaping (D1Core.CardPushDetails?, (any Swift.Error)?) -> Swift.Void)
  public func digitalCardAuthCode(_ cardId: Swift.String, digitalCardId: Swift.String, completion: @escaping (Foundation.NSMutableData?, (any Swift.Error)?) -> Swift.Void)
}
public class CardSettings {
  final public let control: D1Core.CardControlSettings
  final public let limit: D1Core.CardLimitSettings
  public init(cardControlSettings: D1Core.CardControlSettings, limit: D1Core.CardLimitSettings)
  @objc deinit
}
public class CardControlSettings {
  final public let isOnlinePaymentEnabled: Foundation.NSNumber
  final public let isContactlessEnabled: Foundation.NSNumber?
  final public let isMagneticStripeEnabled: Foundation.NSNumber?
  final public let isATMWithdrawalEnabled: Foundation.NSNumber?
  final public let isAbroadPaymentEnabled: Foundation.NSNumber
  final public let deniedCurrencyList: [Swift.String]
  final public let geography: D1Core.CardGeographySettings
  final public let merchant: D1Core.CardMerchantSettings
  public init(isOnlinePaymentEnabled: Foundation.NSNumber, isContactlessEnabled: Foundation.NSNumber?, isMagneticStripeEnabled: Foundation.NSNumber?, isATMWithdrawalEnabled: Foundation.NSNumber?, isAbroadPaymentEnabled: Foundation.NSNumber, deniedCurrencyList: [Swift.String], geography: D1Core.CardGeographySettings, merchant: D1Core.CardMerchantSettings)
  @objc deinit
}
public class CardGeographySettings {
  final public let regionList: [Foundation.NSNumber]
  final public let countryList: [Swift.String]
  public init(regionList: [Foundation.NSNumber], countryList: [Swift.String])
  @objc deinit
}
public class CardMerchantSettings {
  final public let isGamblingMerchantEnabled: Swift.Bool
  final public let isAdultMerchantEnabled: Swift.Bool
  final public let isRiskyMerchantEnabled: Swift.Bool
  public init(isGamblingMerchantEnabled: Swift.Bool, isAdultMerchantEnabled: Swift.Bool, isRiskyMerchantEnabled: Swift.Bool)
  @objc deinit
}
public class CardLimitSettings {
  final public let currency: Swift.String?
  final public let dailyPurchaseLimit: D1Core.CardPurchaseLimitSettings?
  final public let weeklyPurchaseLimit: D1Core.CardPurchaseLimitSettings?
  final public let monthlyPurchaseLimit: D1Core.CardPurchaseLimitSettings?
  final public let yearlyPurchaseLimit: D1Core.CardPurchaseLimitSettings?
  final public let dailyWithdrawalLimit: D1Core.CardWithdrawalLimitSettings?
  final public let weeklyWithdrawalLimit: D1Core.CardWithdrawalLimitSettings?
  final public let monthlyWithdrawalLimit: D1Core.CardWithdrawalLimitSettings?
  final public let yearlyWithdrawalLimit: D1Core.CardWithdrawalLimitSettings?
  public init(currency: Swift.String?, dailyPurchaseLimit: D1Core.CardPurchaseLimitSettings?, weeklyPurchaseLimit: D1Core.CardPurchaseLimitSettings?, monthlyPurchaseLimit: D1Core.CardPurchaseLimitSettings?, yearlyPurchaseLimit: D1Core.CardPurchaseLimitSettings?, dailyWithdrawalLimit: D1Core.CardWithdrawalLimitSettings?, weeklyWithdrawalLimit: D1Core.CardWithdrawalLimitSettings?, monthlyWithdrawalLimit: D1Core.CardWithdrawalLimitSettings?, yearlyWithdrawalLimit: D1Core.CardWithdrawalLimitSettings?)
  @objc deinit
}
public class CardPurchaseLimitSettings {
  final public let periodType: Foundation.NSNumber?
  final public let fixedPeriodIndex: Foundation.NSNumber?
  final public let maxLimit: Swift.Int
  final public let limit: Swift.Int
  final public let currentAmount: Swift.Double
  public init(cardSettingsPeriodType: Foundation.NSNumber?, fixedPeriodIndex: Foundation.NSNumber?, maxLimit: Swift.Int, limit: Swift.Int, currentAmount: Swift.Double)
  @objc deinit
}
public class CardWithdrawalLimitSettings {
  final public let periodType: Foundation.NSNumber?
  final public let fixedPeriodIndex: Foundation.NSNumber?
  final public let maxLimit: Swift.Int
  final public let limit: Swift.Int
  final public let currentAmount: Swift.Double
  public init(cardSettingsPeriodType: Foundation.NSNumber?, fixedPeriodIndex: Foundation.NSNumber?, maxLimit: Swift.Int, limit: Swift.Int, currentAmount: Swift.Double)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VirtualCard {
  public var pan: Foundation.Data
  public var expiryDate: Foundation.Data
  public var cvv: Foundation.Data
  public var cardHolderName: Foundation.Data?
  @objc deinit
}
extension D1Core.VirtualCard {
  public func wipe()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class DisplayTextField : UIKit.UITextField {
  @_Concurrency.MainActor @preconcurrency @objc convenience dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency open func insecureCopyToClipboard()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func insertText(_ text: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isSecureTextEntry: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var canBecomeFirstResponder: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func becomeFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var autocorrectionType: UIKit.UITextAutocorrectionType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var keyboardType: UIKit.UIKeyboardType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var delegate: (any UIKit.UITextFieldDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var inputView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var inputAccessoryView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Push {
  public static func pushToken() -> Swift.String?
  public static func updateToken(_ pushToken: Swift.String)
  @objc deinit
}
public enum CardActivationMethod : Swift.UInt, Swift.Decodable {
  case unknown
  case cvv
  case last4
  case nothing
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
extension D1Core.CardClient {
  public func transactionHistory(cardId: Swift.String, query: D1Core.TransactionQuery, completion: @escaping ([D1Core.TransactionRecord]?, (any Swift.Error)?) -> Swift.Void)
  public func cardListCaaS(completion: @escaping ([D1Core.Card]?, (any Swift.Error)?) -> Swift.Void)
  public func suspendCard(withCardId cardId: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func resumeCard(withCardId cardId: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func replaceCard(withCardId cardId: Swift.String, reason: D1Core.StateReason, completion: @escaping (Swift.String?, (any Swift.Error)?) -> Swift.Void)
  public func cardSettings(withCardId cardId: Swift.String, completion: @escaping (D1Core.CardSettings?, (any Swift.Error)?) -> Swift.Void)
  public func updateCardControlSettings(withCardId cardId: Swift.String, cardControlSettings: D1Core.CardControlSettings, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func updateCardLimitSettings(withCardId cardId: Swift.String, cardLimitSettings: D1Core.CardLimitSettings, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
}
public class WalletExtensionStorage {
  public init(appGroupId: Swift.String) throws
  public func setString(_ value: Swift.String, forKey key: Swift.String) throws
  public func setImage(_ image: UIKit.UIImage, fileName: Swift.String) throws -> Swift.Bool
  public func setArray(_ values: [[Swift.String : Swift.String]], forKey key: Swift.String) throws -> Swift.Bool
  public func stringValue(forKey key: Swift.String) throws -> Swift.String
  public func image(forFileName fileName: Swift.String) -> UIKit.UIImage?
  public func arrayValue(forKey key: Swift.String) throws -> [[Swift.String : Swift.String]]
  public static func reset()
  public static func appGroupId() throws -> Swift.String
  @objc deinit
}
extension D1Core.CardClient {
  public func activatePhysicalCard(withCardId cardId: Swift.String, entryUi: D1Core.EntryUI, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func displayPhysicalCardPin(_ cardId: Swift.String, cardPinUi: D1Core.CardPinUI, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func cardActivationMethod(cardId: Swift.String, completion: @escaping (D1Core.CardActivationMethod, (any Swift.Error)?) -> Swift.Void)
  public func setPhysicalCardPin(withCardId cardId: Swift.String, entryEditPin: D1Core.SecureTextField, confirmEditPin: D1Core.SecureTextField, options: D1Core.ChangePINOptions, entryUIDelegate: any D1Core.PINEntryUIDelegate) throws -> D1Core.PINEntryUI
}
@_hasMissingDesignatedInitializers public class Card {
  final public let cardMetadata: D1Core.CardMetadata
  final public let cardId: Swift.String?
  @objc deinit
}
public enum OngoingOperation : Swift.Decodable {
  case none
  case renewal
  public static func == (a: D1Core.OngoingOperation, b: D1Core.OngoingOperation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum StateReason : Swift.Decodable {
  case none
  case closedAccount
  case closedCard
  case cardLost
  case cardFound
  case cardStolen
  case cardBroken
  case cardNotReceived
  case fraud
  case userDecision
  case issuerDecision
  case pinLocked
  case cvv2Locked
  case expiryDateLocked
  public static func == (a: D1Core.StateReason, b: D1Core.StateReason) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
open class EntryUI {
  public init(entryTextField: D1Core.SecureTextField? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CardAsset : Swift.Decodable {
  public var assetContentType: D1Core.AssetContentType
  public var contentArray: [D1Core.CardAssetContent]
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class CoreConfig {
  public static func version() -> Swift.String
  public static func setVersionInfo(_ versionInfo: [Swift.String : Swift.String])
  public static func versionInfo() -> [Swift.String : Swift.String]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class PinDisplayTextField : UIKit.UITextField {
  @_Concurrency.MainActor @preconcurrency @objc convenience dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func insertText(_ text: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isSecureTextEntry: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var canBecomeFirstResponder: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func becomeFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var autocorrectionType: UIKit.UITextAutocorrectionType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var keyboardType: UIKit.UIKeyboardType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var delegate: (any UIKit.UITextFieldDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var inputView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var inputAccessoryView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CardAssetContent : Swift.Decodable {
  public var encodedData: Swift.String
  public var width: Swift.Int
  public var height: Swift.Int
  public var mimeType: D1Core.CardMimeType
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public enum NotificationType : Swift.Decodable {
  case messaging
  case cardState
  public static func == (a: D1Core.NotificationType, b: D1Core.NotificationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum MessageType : Swift.Int, Swift.Decodable {
  case cardStatusUpdate
  case authorization
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MessageFormat : Swift.Int, Swift.Decodable {
  case text
  case html
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension D1Core.WalletType : Swift.Equatable {}
extension D1Core.WalletType : Swift.Hashable {}
extension D1Core.WalletType : Swift.RawRepresentable {}
extension D1Core.AssetContentType : Swift.Equatable {}
extension D1Core.AssetContentType : Swift.Hashable {}
extension D1Core.AssetContentType : Swift.RawRepresentable {}
extension D1Core.CardScheme : Swift.Equatable {}
extension D1Core.CardScheme : Swift.Hashable {}
extension D1Core.CardScheme : Swift.RawRepresentable {}
extension D1Core.CardState : Swift.Equatable {}
extension D1Core.CardState : Swift.Hashable {}
extension D1Core.CardState : Swift.RawRepresentable {}
extension D1Core.CardMimeType : Swift.Equatable {}
extension D1Core.CardMimeType : Swift.Hashable {}
extension D1Core.CardMimeType : Swift.RawRepresentable {}
extension D1Core.CardAction : Swift.Equatable {}
extension D1Core.CardAction : Swift.Hashable {}
extension D1Core.CardAction : Swift.RawRepresentable {}
extension D1Core.ActivateDigitalCardStatus : Swift.Equatable {}
extension D1Core.ActivateDigitalCardStatus : Swift.Hashable {}
extension D1Core.ActivateDigitalCardStatus : Swift.RawRepresentable {}
extension D1Core.PINEvent : Swift.Equatable {}
extension D1Core.PINEvent : Swift.Hashable {}
extension D1Core.PINEvent : Swift.RawRepresentable {}
extension D1Core.CardPushDetailsContext : Swift.Equatable {}
extension D1Core.CardPushDetailsContext : Swift.Hashable {}
extension D1Core.CardPushDetailsContext : Swift.RawRepresentable {}
extension D1Core.TransactionType : Swift.Equatable {}
extension D1Core.TransactionType : Swift.Hashable {}
extension D1Core.TransactionType : Swift.RawRepresentable {}
extension D1Core.TransactionStatus : Swift.Equatable {}
extension D1Core.TransactionStatus : Swift.Hashable {}
extension D1Core.TransactionStatus : Swift.RawRepresentable {}
extension D1Core.InitiatingParty : Swift.Equatable {}
extension D1Core.InitiatingParty : Swift.Hashable {}
extension D1Core.InitiatingParty : Swift.RawRepresentable {}
extension D1Core.CardSettingsGeographyRegion : Swift.Equatable {}
extension D1Core.CardSettingsGeographyRegion : Swift.Hashable {}
extension D1Core.CardSettingsGeographyRegion : Swift.RawRepresentable {}
extension D1Core.CardSettingsPeriodType : Swift.Equatable {}
extension D1Core.CardSettingsPeriodType : Swift.Hashable {}
extension D1Core.CardSettingsPeriodType : Swift.RawRepresentable {}
extension D1Core.D1CError : Swift.Equatable {}
extension D1Core.D1CError : Swift.Hashable {}
extension D1Core.D1CError : Swift.RawRepresentable {}
extension D1Core.LogSubsystem : Swift.Equatable {}
extension D1Core.LogSubsystem : Swift.Hashable {}
extension D1Core.LogSubsystem : Swift.RawRepresentable {}
extension D1Core.SecureLogTag : Swift.Equatable {}
extension D1Core.SecureLogTag : Swift.Hashable {}
extension D1Core.SecureLogTag : Swift.RawRepresentable {}
extension D1Core.CardActivationMethod : Swift.Equatable {}
extension D1Core.CardActivationMethod : Swift.Hashable {}
extension D1Core.CardActivationMethod : Swift.RawRepresentable {}
extension D1Core.OngoingOperation : Swift.Equatable {}
extension D1Core.OngoingOperation : Swift.Hashable {}
extension D1Core.StateReason : Swift.Equatable {}
extension D1Core.StateReason : Swift.Hashable {}
extension D1Core.NotificationType : Swift.Equatable {}
extension D1Core.NotificationType : Swift.Hashable {}
extension D1Core.MessageType : Swift.Equatable {}
extension D1Core.MessageType : Swift.Hashable {}
extension D1Core.MessageType : Swift.RawRepresentable {}
extension D1Core.MessageFormat : Swift.Equatable {}
extension D1Core.MessageFormat : Swift.Hashable {}
extension D1Core.MessageFormat : Swift.RawRepresentable {}
